---
# tasks file for zabbix-install
- name: Configure postgresql to preferred major version
  ansible.builtin.dnf:
    update_cache: true    
    name: "@postgresql:{{ zabbix_postgresql_version }}"
    state: present
  when:
    - ansible_distribution in [ "CentOS", "EL", "Rocky", "AlmaLinux" ]
    - ansible_distribution_major_version >= "8"

- name: Configure php to preferred major version
  ansible.builtin.dnf:
    update_cache: true    
    name: "@php:{{ zabbix_php_version }}"
    state: present
  when:
    - ansible_distribution in [ "CentOS", "EL", "Rocky", "AlmaLinux" ]
    - ansible_distribution_major_version >= "8"

- name: Install official zabbix repository
  ansible.builtin.dnf:
    # GPG check disabled intentionally as the official documentation does not provide GPG verification in install guide
    # Eventually I'd like to add support manually via their repo if possible
    disable_gpg_check: true
    name: "{{ zabbix_repository_url }}"
    state: present

- name: Install necessary software
  ansible.builtin.dnf:
    update_cache: true    
    name: "{{ zabbix_proxy_required_packages }}"
    state: present
  when:
    - ansible_distribution in [ "CentOS", "EL", "Rocky", "AlmaLinux" ]
    - ansible_distribution_major_version >= "8"

- name: Configure postgresql instance for hosting local database
  when:
    - zabbix_install_pgsql_init == true
  block:
    - name: DB Deploy | Verify host requirements
      block:
        - name: DB Deploy Prep | Determine ... /var/lib/pgsql/
          register: _stat_pgsql
          ansible.builtin.stat:
            path: /var/lib/pgsql/
        
        - name: DB Deploy Prep | Assert /var/lib/pgsql is setup correctly
          ansible.builtin.assert:
            that: 
              - _stat_pgsql.stat.pw_user == "postgres"
              - _stat_pgsql.stat.mode == "0700"
            msg: "/var/lib/pgsql directory mode/ownership test failed"
      
      rescue:
        - name: DB Deploy Prep | Create /var/lib/pgsql directory
          ansible.builtin.file:
            path: "/var/lib/pgsql"
            state: directory
            owner: "postgres"
            group: "postgres"
            mode: "0700"
            setype: "postgresql_db_t"

    - name: Initialize the postgresql cluster
      ignore_errors: true
      register: _postgres_initdb
      ansible.builtin.command: /usr/bin/postgresql-setup --initdb

      # Protection against overwriting legitimate data
    - name: Detect install is clean-state
      when: _postgres_initdb.rc == 0 
      ansible.builtin.set_fact:
        _allow_restore_db_schema: true

    - name: Start the postgresql server
      ansible.builtin.systemd_service:
        name: postgresql
        state: started
        enabled: true

    - name: Add zabbix user
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ zabbix_proxy_database_username }}"
        password: "{{ zabbix_proxy_database_password }}"

    - name: Add zabbix database
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ zabbix_proxy_database_name }}"
        owner: "{{ zabbix_proxy_database_username }}"

    - name: Update pg_hba.conf for zabbix access
      notify:
        - Restart postgresql
      community.postgresql.postgresql_pg_hba:
        dest: /var/lib/pgsql/data/pg_hba.conf
        contype: host
        users: "{{ zabbix_proxy_database_username }}"
        source: samehost
        databases: "{{ zabbix_proxy_database_name }}"
        method: md5
        create: true
    
    - name: Restart postgres
      ansible.builtin.service:
        name: postgresql
        state: restarted

    - name: Restore zabbix data set to db
      when:
        - _allow_restore_db_schema is true
      community.postgresql.postgresql_db:
        login_user: "{{ zabbix_proxy_database_username }}"
        login_password: "{{ zabbix_proxy_database_password }}"
        login_host: "{{ zabbix_proxy_database_host }}"
        name: "{{ zabbix_proxy_database_name }}"
        state: restore
        target: "/usr/share/zabbix-sql-scripts/postgresql/proxy.sql"

#- name: configure zabbix Install
#
#- name: start zabbix Proxy

- name: Configure and start Zabbix Proxy
  block:
    - name: Configure zabbix proxy to use local database.
      notify: Restart zabbix-proxy
      ansible.builtin.lineinfile:
        regex: "{{ item.regex }}"
        line: "{{ item.line }}"
        path: /etc/zabbix/zabbix_proxy.conf
      with_items:
        - regex: "^DBName=zabbix"
          line: "DBName={{ zabbix_database_name }}"
        - regex: "^DBUser=zabbix"
          line: "DBUser={{ zabbix_database_username}}"
        - regex: "# DBPassword="
          line: "DBPassword={{ zabbix_database_password }}"

    - name: Create PSK file for zabbix encryption
      ansible.builtin.copy:
        dest: "/etc/zabbix/paz-psk"
        mode: '0600'
        owner: 'root'
        group: 'zabbix'
        content: "{{ zabbix_proxy_encryption_psk_key }}"
      when:
        - (zabbix_proxy_encryption_tlsconnect_mode != "none" ) or (zabbix_proxy_encryption_tlsaccept_mode != "none")

    # Multiple changes can be staged in one lineinfile stanza, we use this here to adjust two lines in the nginx config
    - name: Configure proxy encryption options
      notify: Restart zabbix-proxy
      ansible.builtin.lineinfile:
        regex: "{{ item.regex }}"
        line: "{{ item.line }}"
        path: /etc/zabbix/zabbix_proxy.conf
      with_items:
        - regex: "# TLSConnect="
          line: "TLSConnect={{ zabbix_proxy_encryption_tlsconnect_mode }}"
        - regex: "# TLSAccept"
          line: "TLSConnect={{ zabbix_proxy_encryption_tlsaccept_mode }}"
        - regex: "# TLSPSKIdentity"
          line: "TLSPSKIdentity={{ zabbix_proxy_encryption_psk_identity }}"
        - regex: "# TLSPSKFile"
          line: "TLSPSKFile=/etc/zabbix/paz-psk"
      when:
        - (zabbix_proxy_encryption_tlsconnect_mode != "none" ) or (zabbix_proxy_encryption_tlsaccept_mode != "none")

    - name: Start and enable server service
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - zabbix-proxy.service
        - zabbix-agent.service
    
    - name: Configure firewall for runtime
      ansible.builtin.firewalld:
        zone: public
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: true
      loop:
        - "10050/tcp"

